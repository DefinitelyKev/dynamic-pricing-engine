"""update_models_for_domain_properties

Revision ID: 7d6f71fdf36e
Revises: 787ae22cee77
Create Date: 2025-02-03 15:24:19.251996

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7d6f71fdf36e'
down_revision: Union[str, None] = '787ae22cee77'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('suburb',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('postcode', sa.String(), nullable=False),
    sa.Column('state', sa.String(), nullable=False),
    sa.Column('region', sa.String(), nullable=True),
    sa.Column('area', sa.String(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('properties_for_rent', sa.Integer(), nullable=False),
    sa.Column('properties_for_sale', sa.Integer(), nullable=False),
    sa.Column('median_price', sa.Float(), nullable=True),
    sa.Column('median_rent', sa.Float(), nullable=True),
    sa.Column('avg_days_on_market', sa.Float(), nullable=True),
    sa.Column('auction_clearance_rate', sa.Float(), nullable=True),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('avg_age_range', sa.String(), nullable=True),
    sa.Column('owner_percentage', sa.Float(), nullable=True),
    sa.Column('renter_percentage', sa.Float(), nullable=True),
    sa.Column('family_percentage', sa.Float(), nullable=True),
    sa.Column('single_percentage', sa.Float(), nullable=True),
    sa.Column('entry_price', sa.Float(), nullable=True),
    sa.Column('luxury_price', sa.Float(), nullable=True),
    sa.Column('sales_growth', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_suburb_name'), 'suburb', ['name'], unique=False)
    op.create_index(op.f('ix_suburb_postcode'), 'suburb', ['postcode'], unique=False)
    op.create_table('suburb_surroundings',
    sa.Column('suburb_id', sa.Integer(), nullable=False),
    sa.Column('surrounding_suburb_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['suburb_id'], ['suburb.id'], ),
    sa.ForeignKeyConstraint(['surrounding_suburb_id'], ['suburb.id'], ),
    sa.PrimaryKeyConstraint('suburb_id', 'surrounding_suburb_id')
    )
    op.create_table('priceadjustment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('property_id', sa.Integer(), nullable=False),
    sa.Column('rule_id', sa.Integer(), nullable=False),
    sa.Column('original_price', sa.String(), nullable=False),
    sa.Column('adjusted_price', sa.String(), nullable=False),
    sa.Column('adjustment_type', sa.String(), nullable=False),
    sa.Column('adjustment_value', sa.Float(), nullable=False),
    sa.Column('market_conditions', sa.JSON(), nullable=False, comment='Market conditions when adjustment was made'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['property_id'], ['property.id'], ),
    sa.ForeignKeyConstraint(['rule_id'], ['pricingrule.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('propertyevent',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('property_id', sa.Integer(), nullable=False),
    sa.Column('event_price', sa.Float(), nullable=False),
    sa.Column('event_date', sa.String(), nullable=False),
    sa.Column('agency', sa.String(), nullable=True),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('days_on_market', sa.Integer(), nullable=False),
    sa.Column('price_description', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['property_id'], ['property.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('school',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('property_id', sa.Integer(), nullable=False),
    sa.Column('suburb_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('sector', sa.String(), nullable=False),
    sa.Column('gender', sa.String(), nullable=False),
    sa.Column('distance', sa.Float(), nullable=False),
    sa.Column('year_range', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['property_id'], ['property.id'], ),
    sa.ForeignKeyConstraint(['suburb_id'], ['suburb.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index('ix_marketdata_id', table_name='marketdata')
    op.drop_table('marketdata')
    op.drop_index('ix_pricehistory_id', table_name='pricehistory')
    op.drop_table('pricehistory')
    op.add_column('pricingrule', sa.Column('rule_type', sa.String(), nullable=False))
    op.add_column('pricingrule', sa.Column('stats', sa.JSON(), nullable=False, comment='Rule application statistics'))
    op.alter_column('pricingrule', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('pricingrule', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('pricingrule', 'conditions',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False,
               comment="E.g., {'property_type': 'House', 'suburb': 'Calga'}")
    op.alter_column('pricingrule', 'adjustments',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False,
               comment="E.g., {'type': 'percentage', 'value': 10}")
    op.alter_column('pricingrule', 'priority',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('pricingrule', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('pricingrule', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.drop_index('ix_pricingrule_id', table_name='pricingrule')
    op.add_column('property', sa.Column('property_id', sa.String(), nullable=False))
    op.add_column('property', sa.Column('type', sa.String(), nullable=False))
    op.add_column('property', sa.Column('category', sa.String(), nullable=False))
    op.add_column('property', sa.Column('parking_spaces', sa.Integer(), nullable=True))
    op.add_column('property', sa.Column('internal_area', sa.Float(), nullable=True))
    op.add_column('property', sa.Column('land_area', sa.Float(), nullable=True))
    op.add_column('property', sa.Column('display_address', sa.String(), nullable=False))
    op.add_column('property', sa.Column('postcode', sa.String(), nullable=False))
    op.add_column('property', sa.Column('suburb_name', sa.String(), nullable=False))
    op.add_column('property', sa.Column('state', sa.String(), nullable=False))
    op.add_column('property', sa.Column('unit_number', sa.String(), nullable=True))
    op.add_column('property', sa.Column('street_number', sa.String(), nullable=False))
    op.add_column('property', sa.Column('street_name', sa.String(), nullable=False))
    op.add_column('property', sa.Column('street_type', sa.String(), nullable=False))
    op.add_column('property', sa.Column('latitude', sa.Float(), nullable=True))
    op.add_column('property', sa.Column('longitude', sa.Float(), nullable=True))
    op.add_column('property', sa.Column('suburb_id', sa.Integer(), nullable=False))
    op.add_column('property', sa.Column('region', sa.String(), nullable=True))
    op.add_column('property', sa.Column('area', sa.String(), nullable=True))
    op.add_column('property', sa.Column('market_stats', sa.JSON(), nullable=False))
    op.add_column('property', sa.Column('listing_url', sa.String(), nullable=False))
    op.add_column('property', sa.Column('listing_status', sa.String(), nullable=False))
    op.add_column('property', sa.Column('listing_type', sa.String(), nullable=False))
    op.add_column('property', sa.Column('display_price', sa.String(), nullable=False))
    op.add_column('property', sa.Column('images', sa.JSON(), nullable=False))
    op.add_column('property', sa.Column('suburb_insights', sa.JSON(), nullable=False))
    op.alter_column('property', 'bathrooms',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('property', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('property', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.drop_index('ix_property_id', table_name='property')
    op.drop_index('ix_property_name', table_name='property')
    op.create_index(op.f('ix_property_property_id'), 'property', ['property_id'], unique=False)
    op.create_foreign_key(None, 'property', 'suburb', ['suburb_id'], ['id'])
    op.drop_column('property', 'square_footage')
    op.drop_column('property', 'current_price')
    op.drop_column('property', 'name')
    op.drop_column('property', 'address')
    op.drop_column('property', 'amenities')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('property', sa.Column('amenities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('property', sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('property', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('property', sa.Column('current_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('property', sa.Column('square_footage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'property', type_='foreignkey')
    op.drop_index(op.f('ix_property_property_id'), table_name='property')
    op.create_index('ix_property_name', 'property', ['name'], unique=False)
    op.create_index('ix_property_id', 'property', ['id'], unique=False)
    op.alter_column('property', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('property', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('property', 'bathrooms',
               existing_type=sa.Integer(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.drop_column('property', 'suburb_insights')
    op.drop_column('property', 'images')
    op.drop_column('property', 'display_price')
    op.drop_column('property', 'listing_type')
    op.drop_column('property', 'listing_status')
    op.drop_column('property', 'listing_url')
    op.drop_column('property', 'market_stats')
    op.drop_column('property', 'area')
    op.drop_column('property', 'region')
    op.drop_column('property', 'suburb_id')
    op.drop_column('property', 'longitude')
    op.drop_column('property', 'latitude')
    op.drop_column('property', 'street_type')
    op.drop_column('property', 'street_name')
    op.drop_column('property', 'street_number')
    op.drop_column('property', 'unit_number')
    op.drop_column('property', 'state')
    op.drop_column('property', 'suburb_name')
    op.drop_column('property', 'postcode')
    op.drop_column('property', 'display_address')
    op.drop_column('property', 'land_area')
    op.drop_column('property', 'internal_area')
    op.drop_column('property', 'parking_spaces')
    op.drop_column('property', 'category')
    op.drop_column('property', 'type')
    op.drop_column('property', 'property_id')
    op.create_index('ix_pricingrule_id', 'pricingrule', ['id'], unique=False)
    op.alter_column('pricingrule', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('pricingrule', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('pricingrule', 'priority',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('pricingrule', 'adjustments',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True,
               comment=None,
               existing_comment="E.g., {'type': 'percentage', 'value': 10}")
    op.alter_column('pricingrule', 'conditions',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True,
               comment=None,
               existing_comment="E.g., {'property_type': 'House', 'suburb': 'Calga'}")
    op.alter_column('pricingrule', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('pricingrule', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('pricingrule', 'stats')
    op.drop_column('pricingrule', 'rule_type')
    op.create_table('pricehistory',
    sa.Column('property_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('reason', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['property.id'], name='pricehistory_property_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='pricehistory_pkey')
    )
    op.create_index('ix_pricehistory_id', 'pricehistory', ['id'], unique=False)
    op.create_table('marketdata',
    sa.Column('property_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('competitor_prices', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('vacancy_rates', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('seasonal_factors', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('local_events', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['property.id'], name='marketdata_property_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='marketdata_pkey')
    )
    op.create_index('ix_marketdata_id', 'marketdata', ['id'], unique=False)
    op.drop_table('school')
    op.drop_table('propertyevent')
    op.drop_table('priceadjustment')
    op.drop_table('suburb_surroundings')
    op.drop_index(op.f('ix_suburb_postcode'), table_name='suburb')
    op.drop_index(op.f('ix_suburb_name'), table_name='suburb')
    op.drop_table('suburb')
    # ### end Alembic commands ###
